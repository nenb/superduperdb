"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[5875],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=o,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return t?r.createElement(h,i(i({ref:n},c),{},{components:t})):r.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},93158:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=t(87462),o=(t(67294),t(3905));const a={},i="Cataloguing voice-memos for a self managed personal assistant",s={unversionedId:"use_cases/items/voice_memos",id:"use_cases/items/voice_memos",title:"Cataloguing voice-memos for a self managed personal assistant",description:"In this example we show-case SuperDuperDB's ability to combine models across data modalities,",source:"@site/content/use_cases/items/voice_memos.md",sourceDirName:"use_cases/items",slug:"/use_cases/items/voice_memos",permalink:"/docs/use_cases/items/voice_memos",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/use_cases/items/voice_memos.md",tags:[],version:"current",frontMatter:{},sidebar:"useCasesSidebar",previous:{title:"Transfer learning using Sentence Transformers and Scikit-Learn",permalink:"/docs/use_cases/items/transfer_learning"}},l={},p=[],c={toc:p},d="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cataloguing-voice-memos-for-a-self-managed-personal-assistant"},"Cataloguing voice-memos for a self managed personal assistant"),(0,o.kt)("p",null,"In this example we show-case SuperDuperDB's ability to combine models across data modalities,\nin this case audio and text, to devise highly sophisticated data based apps, with very little\nboilerplate code."),(0,o.kt)("p",null,"The aim, is to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Maintain a database of audio recordings"),(0,o.kt)("li",{parentName:"ul"},"Index the content of these audio recordings"),(0,o.kt)("li",{parentName:"ul"},"Search and interrogate the content of these audio recordings")),(0,o.kt)("p",null,"We accomplish this by:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Use a ",(0,o.kt)("inlineCode",{parentName:"li"},"transformers")," model by Facebook's AI team to transcribe the audio to text"),(0,o.kt)("li",{parentName:"ol"},"Use an OpenAI vectorization model to index the transcribed text"),(0,o.kt)("li",{parentName:"ol"},"Use OpenAI's ChatGPT model in combination with relevant recordings to interrogate the contents\nof the audio database")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"!pip install torchaudio\n")),(0,o.kt)("p",null,"This functionality could be accomplised using any audio, in particular audio\nhosted on the web, or in an ",(0,o.kt)("inlineCode",{parentName:"p"},"s3")," bucket. For instance, if you have a repository\nof audio of conference calls, or memos, this may be indexed in the same way."),(0,o.kt)("p",null,"To make matters simpler, we use a dataset of audio recordings from the ",(0,o.kt)("inlineCode",{parentName:"p"},"datasets")," library, to demonstrate the\nfunctionality:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from datasets import load_dataset\n\nSAMPLING_RATE = 16000\n\ndata = load_dataset("hf-internal-testing/librispeech_asr_demo", "clean", split="validation")\n')),(0,o.kt)("p",null,"As usual we wrap our MongoDB connector, to connect to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Datalayer"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import pymongo\nfrom superduperdb import superduper\n\ndb = pymongo.MongoClient().documents\n\ndb = superduper(db)\n")),(0,o.kt)("p",null,"Using an ",(0,o.kt)("inlineCode",{parentName:"p"},"Encoder"),", we may add the audio data directly to a MongoDB collection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.db.mongodb.query import Collection\nfrom superduperdb.ext.numpy.array import array\nfrom superduperdb.container.document import Document as D\n\ncollection = Collection('voice-memos')\nenc = array('float64', shape=(None,))\n\ndb.execute(collection.insert_many([\n    D({'audio': enc(r['audio']['array'])}) for r in data\n], encoders=(enc,)))\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"db.execute(collection.find_one()).unpack()\n")),(0,o.kt)("p",null,"Now that we've done that, let's apply a pretrained ",(0,o.kt)("inlineCode",{parentName:"p"},"transformers")," model to this data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import torch\nfrom transformers import Speech2TextProcessor, Speech2TextForConditionalGeneration\n\nmodel = Speech2TextForConditionalGeneration.from_pretrained("facebook/s2t-small-librispeech-asr")\nprocessor = Speech2TextProcessor.from_pretrained("facebook/s2t-small-librispeech-asr")\n')),(0,o.kt)("p",null,"We wrap this model using the SuperDuperDB wrapper for ",(0,o.kt)("inlineCode",{parentName:"p"},"transformers"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.ext.transformers.model import Pipeline\n\ntranscriber = Pipeline(\n    identifier='transcription',\n    object=model,\n    preprocess=processor,\n    preprocess_kwargs={'sampling_rate': SAMPLING_RATE, 'return_tensors': 'pt', 'padding': True},\n    postprocess=lambda x: processor.batch_decode(x, skip_special_tokens=True),\n    predict_method='generate',\n    preprocess_type='other',\n)\n")),(0,o.kt)("p",null,"Let's verify this ",(0,o.kt)("inlineCode",{parentName:"p"},"Pipeline")," works on a sample datapoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import IPython\n\nIPython.display.Audio(data[0]['audio']['array'], rate=SAMPLING_RATE)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"transcriber.predict(data[0]['audio']['array'], one=True)\n")),(0,o.kt)("p",null,"Now let's apply the ",(0,o.kt)("inlineCode",{parentName:"p"},"Pipeline")," to all of the audio recordings:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"transcriber.predict(X='audio', db=db, select=collection.find(), max_chunk_size=10)\n")),(0,o.kt)("p",null,"We may now verify that all of the recordings have been transcribed in the database"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"list(db.execute(\n    Collection('voice-memos').find({}, {'_outputs.audio.transcription': 1})\n))\n")),(0,o.kt)("p",null,"As in previous examples, we can use OpenAI's text-embedding models to vectorize and search the\ntextual transcriptions directly in MongoDB:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import os\nos.environ['OPENAI_API_KEY'] = '<YOUR-API-KEY>'\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.container.vector_index import VectorIndex\nfrom superduperdb.container.listener import Listener\nfrom superduperdb.ext.openai.model import OpenAIEmbedding\nfrom superduperdb.db.mongodb.query import Collection\n\ndb.add(\n    VectorIndex(\n        identifier='my-index',\n        indexing_listener=Listener(\n            model=OpenAIEmbedding(model='text-embedding-ada-002'),\n            key='_outputs.audio.transcription',\n            select=Collection(name='voice-memos').find(),\n        ),\n    )\n)\n")),(0,o.kt)("p",null,'Let\'s confirm this has worked, by searching for the "royal cavern"'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"list(db.execute(\n    Collection('voice-memos').like(\n        {'_outputs.audio.transcription': 'royal cavern'},\n        n=2,\n        vector_index='my-index',\n    ).find({}, {'_outputs.audio.transcription': 1})\n))\n")),(0,o.kt)("p",null,"Now we can connect the previous steps with the ",(0,o.kt)("inlineCode",{parentName:"p"},"gpt-3.5.turbo"),", which is a chat-completion\nmodel on OpenAI. The plan is to seed the completions with the most relevant audio recordings,\nas judged by their textual transcriptions. These transcriptions are retrieved using\nthe previously configured ",(0,o.kt)("inlineCode",{parentName:"p"},"VectorIndex"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.ext.openai.model import OpenAIChatCompletion\n\nchat = OpenAIChatCompletion(\n    model='gpt-3.5-turbo',\n    prompt=(\n        'Use the following facts to answer this question\\n'\n        '{context}\\n\\n'\n        'Here\\'s the question:\\n'\n    ),\n)\n\ndb.add(chat)\n\nprint(db.show('model'))\n")),(0,o.kt)("p",null,"Let's test the full model! We can ask a question which asks about a specific fact\nmentioned somewhere in the audio recordings. The model will retrieve the most relevant\nrecordings, and use these in formulating its answer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.container.document import Document\n\nq = 'Is anything really Greek?'\n\nprint(db.predict(\n    model='gpt-3.5-turbo',\n    input=q,\n    context_select=Collection('voice-memos').like(\n        Document({'_outputs.audio.transcription': q}), vector_index='my-index'\n    ).find(),\n    context_key='_outputs.audio.transcription',\n)[0].content)\n")))}m.isMDXComponent=!0}}]);