"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[5182],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return t?o.createElement(f,i(i({ref:n},l),{},{components:t})):o.createElement(f,i({ref:n},l))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p[u]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},49376:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var o=t(87462),r=(t(67294),t(3905));const a={},i="Scrape data from the inline documentation of a Python package",p={unversionedId:"docs/how_to/scrape_pymongo",id:"docs/how_to/scrape_pymongo",title:"Scrape data from the inline documentation of a Python package",description:"Install requirements. Sphinx required to convert doc-strings to Markdown documents, which can then be easily",source:"@site/content/docs/how_to/scrape_pymongo.md",sourceDirName:"docs/how_to",slug:"/docs/how_to/scrape_pymongo",permalink:"/docs/docs/how_to/scrape_pymongo",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/docs/how_to/scrape_pymongo.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How to connect to and query SuperDuperDB",permalink:"/docs/docs/how_to/playground"},next:{title:"How to train a model using SuperDuperDB",permalink:"/docs/docs/how_to/train_a_model"}},c={},s=[],l={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"scrape-data-from-the-inline-documentation-of-a-python-package"},"Scrape data from the inline documentation of a Python package"),(0,r.kt)("p",null,"Install requirements. ",(0,r.kt)("a",{parentName:"p",href:"https://sphinx-rtd-tutorial.readthedocs.io/"},"Sphinx")," required to convert doc-strings to Markdown documents, which can then be easily\nparsed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"!pip install superduperdb\n!pip install sphinx\n!pip install sphinx-markdown-builder\n")),(0,r.kt)("p",null,"Convert the ",(0,r.kt)("inlineCode",{parentName:"p"},"pymongo")," inline documentation to markdown files."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"%%bash\ngit clone git@github.com:mongodb/mongo-python-driver.git\ncd mongo-python-driver\necho 'extensions.append(\"sphinx_markdown_builder\")' >> doc/conf.py\nsphinx-apidoc -f -o source pymongo/\nmkdir output\nsphinx-build -a -b markdown doc output\n")),(0,r.kt)("p",null,"Parse those files."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import os\nimport re\n\nPARENT_DIR = './mongo-python-driver/output/api/pymongo'\n\ndocuments = os.listdir(f'{PARENT_DIR}/')\ndata = []\n\nfor file in documents:\n    with open(f'{PARENT_DIR}/{file}') as f:\n        content = f.read()\n    split = re.split(r'^(#{1,4}) ', content, flags=re.MULTILINE)\n    split = [(split[2 * i - 1], split[2 * i]) for i in range(1, len(split) // 2)]\n    last_key = None\n    for item in split:\n        type_ = item[0]\n        content = item[1]\n        key = content.split('\\n')[0]\n        key = re.split('[:\\(\\*]', re.sub('\\*[a-z]+\\*', '', key).strip())[0]\n        value = '\\n'.join(content.split('\\n')[1:])\n        info = {}\n        if type_ in {'###', '####'}:\n            if type_ == '###':\n                if last_key is None:\n                    last_key = key\n                info['key'] = key\n                info['parent'] = None\n                last_key = key\n            elif type_ == '####':\n                info['parent'] = last_key\n                info['key'] = key\n            info['value'] = value[:120]\n            info['document'] = file\n            if ' ' in key:\n                continue\n            if re.match('^[A-Z]{2,}$', key):\n                continue\n            if 'Version' in key:\n                continue\n            info['res'] = key\n            data.append(info)\n")),(0,r.kt)("p",null,"Save the documentation as JSON."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import json\nwith open('pymongo.json', 'w') as f:\n    json.dump(data, f)\n")))}d.isMDXComponent=!0}}]);