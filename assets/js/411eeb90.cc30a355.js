"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[4810],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},59178:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={},i="Configuration",l={unversionedId:"docs/cluster/configuration",id:"docs/cluster/configuration",title:"Configuration",description:"superduperdb/misc/config.py contains a complete definition using pydantic of the default",source:"@site/content/docs/cluster/configuration.md",sourceDirName:"docs/cluster",slug:"/docs/cluster/configuration",permalink:"/docs/docs/cluster/configuration",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/content/docs/cluster/configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Client-server implementation",permalink:"/docs/docs/cluster/client_server"},next:{title:"Dask Jobs",permalink:"/docs/docs/cluster/jobs"}},s={},c=[],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"superduperdb/misc/config.py")," contains a complete definition using ",(0,o.kt)("inlineCode",{parentName:"p"},"pydantic")," of the default\nconfiguration. This may be overridden using a ",(0,o.kt)("inlineCode",{parentName:"p"},"configs.json")," file containing in the\nworking directory. "),(0,o.kt)("p",null,"There are three ways to set a config variable"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"put just the values you want to change in a file ",(0,o.kt)("inlineCode",{parentName:"li"},"configs.json")," at the room of ",(0,o.kt)("inlineCode",{parentName:"li"},"superduperdb-stealth")),(0,o.kt)("li",{parentName:"ul"},"set an environment variable with the value"),(0,o.kt)("li",{parentName:"ul"},"set it in code")),(0,o.kt)("p",null,"For example, these three forms are identical:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Storing ",(0,o.kt)("inlineCode",{parentName:"li"},'{"remote": True, "dask": {"ip": "1.1.1.1"}}')," in ",(0,o.kt)("inlineCode",{parentName:"li"},"configs.json")),(0,o.kt)("li",{parentName:"ul"},"Setting environment variables ",(0,o.kt)("inlineCode",{parentName:"li"},"SUPERDUPERDB_REMOTE=true")," and\n",(0,o.kt)("inlineCode",{parentName:"li"},"SUPERDUPERDB_DASK_IP=1.1.1.1")),(0,o.kt)("li",{parentName:"ul"},"In Python, ",(0,o.kt)("inlineCode",{parentName:"li"},"CFG.remote = True; CFG.dask.ip = '1.1.1.1'"))),(0,o.kt)("p",null,"Here is what the default config object looks like in ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON")," format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "apis": {\n        "providers": {},\n        "retry": {\n            "wait_multiplier": 1.0,\n            "wait_min": 4.0,\n            "wait_max": 10.0,\n            "stop_after_attempt": 2\n        }\n    },\n    "dask": {\n        "port": 8786,\n        "password": "",\n        "username": "",\n        "ip": "localhost",\n        "serializers": [],\n        "deserializers": []\n    },\n    "logging": {\n        "kwargs": {},\n        "level": "INFO",\n        "type": "STDERR"\n    },\n    "data_layers": {\n        "artifact": {\n            "cls": "mongodb",\n            "connection": "pymongo",\n            "kwargs": {\n                "port": 27017,\n                "password": "",\n                "username": "",\n                "host": "localhost"\n            },\n            "name": "_filesystem:documents"\n        },\n        "data_backend": {\n            "cls": "mongodb",\n            "connection": "pymongo",\n            "kwargs": {\n                "port": 27017,\n                "password": "",\n                "username": "",\n                "host": "localhost"\n            },\n            "name": "documents"\n        },\n        "metadata": {\n            "cls": "mongodb",\n            "connection": "pymongo",\n            "kwargs": {\n                "port": 27017,\n                "password": "",\n                "username": "",\n                "host": "localhost"\n            },\n            "name": "documents"\n        }\n    },\n    "distributed": false,\n    "cdc": false,\n    "server": {\n        "web_server": {\n            "host": "127.0.0.1",\n            "port": 3223,\n            "protocol": "http"\n        },\n        "test_port": 32233\n    },\n    "vector_search": {\n        "lancedb": {\n            "uri": "./.lancedb"\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);